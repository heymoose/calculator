// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Keypad should render correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Keypad
    callOperator={[MockFunction]}
    numbers={Array []}
    operators={Array []}
    setOperator={[MockFunction]}
    updateDisplay={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div
          className="NumbersContainer"
        />,
        <div
          className="OperatorsContainer"
        />,
        <div
          className="SubmitContainer"
        >
          <key
            keyAction={[MockFunction]}
            keyType="SubmitKey"
            keyValue="="
          />
        </div>,
      ],
      "className": "KeypadContainer",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [],
          "className": "NumbersContainer",
        },
        "ref": null,
        "rendered": Array [],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [],
          "className": "OperatorsContainer",
        },
        "ref": null,
        "rendered": Array [],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <key
            keyAction={[MockFunction]}
            keyType="SubmitKey"
            keyValue="="
          />,
          "className": "SubmitContainer",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "keyAction": [MockFunction],
            "keyType": "SubmitKey",
            "keyValue": "=",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="NumbersContainer"
          />,
          <div
            className="OperatorsContainer"
          />,
          <div
            className="SubmitContainer"
          >
            <key
              keyAction={[MockFunction]}
              keyType="SubmitKey"
              keyValue="="
            />
          </div>,
        ],
        "className": "KeypadContainer",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [],
            "className": "NumbersContainer",
          },
          "ref": null,
          "rendered": Array [],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [],
            "className": "OperatorsContainer",
          },
          "ref": null,
          "rendered": Array [],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <key
              keyAction={[MockFunction]}
              keyType="SubmitKey"
              keyValue="="
            />,
            "className": "SubmitContainer",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "keyAction": [MockFunction],
              "keyType": "SubmitKey",
              "keyValue": "=",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
